{"version":3,"sources":["Constants.js","utils.js","components/pagination.table.js","App.js","serviceWorker.js","index.js"],"names":["Constants","axios","require","getAllEmployees","a","Promise","resolve","reject","method","url","then","response","data","catch","err","getEmployeeById","id","addEmployee","name","department","phone","email","salary","editEmployee","deleteEmployee","GlobalFilter","preGlobalFilteredRows","globalFilter","setGlobalFilter","count","length","React","useState","value","setValue","onChange","useAsyncDebounce","undefined","className","e","target","placeholder","Table","columns","useTable","initialState","pageIndex","pageSize","useGlobalFilter","useSortBy","usePagination","getTableProps","getTableBodyProps","headerGroups","prepareRow","page","canPreviousPage","canNextPage","pageOptions","pageCount","gotoPage","nextPage","previousPage","setPageSize","state","Container","Row","Col","xs","md","lg","map","headerGroup","getHeaderGroupProps","headers","column","getHeaderProps","getSortByToggleProps","render","isSorted","isSortedDesc","row","i","getRowProps","cells","cell","getCellProps","onClick","disabled","Number","style","width","height","key","PaginationTableComponent","showModal","setShowModal","enteredName","setEnteredName","enteredPhone","setEnteredPhone","enteredEmail","setEnteredEmail","enteredSalary","setEnteredSalary","selectedDepartment","setSelectedDepartment","setErrorMessages","formType","setFormType","selectedEmployee","setSelectedEmployee","allEmployeesData","setAllEmployeesData","submitHandler","event","preventDefault","trim","updateErrorMessages","employeeData","date","Date","getAllEmployeeDataHandler","emptyForm","message","prevState","useEffect","useMemo","editFormHandler","empId","employee","deleteFormHandler","Header","accessor","Cell","original","moment","doj","format","disableGlobalFilter","disableSorting","Button","variant","marginLeft","getProps","someFunc","alert","float","Modal","show","onHide","size","closeButton","Title","Body","Form","Group","Label","Control","type","as","min","step","Footer","App","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"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","file":"static/js/main.147fa199.chunk.js","sourcesContent":["export const Constants = {\n  BASE_URL: 'https://admin-dashboard-api.herokuapp.com',\n  GET_ALL_EMPLOYEES: '/employee',\n  CREATE_EMPLOYEE: '/employee',\n  GET_EMPLOYEE: '/employee/',\n};","import { Constants } from './Constants';\nconst axios = require('axios');\n\nexport const getAllEmployees = async () => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'get',\n      url: Constants.BASE_URL + Constants.GET_ALL_EMPLOYEES,\n    }).then(function (response) {\n      return resolve(response.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  })\n}\n\nexport const getEmployeeById = async ({ id }) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'get',\n      url: Constants.BASE_URL + Constants.GET_EMPLOYEE + id,\n    }).then(function (response) {\n      return resolve(response.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  })\n}\n\nexport const addEmployee = async ({ name, department, phone, email, salary }) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'post',\n      url: Constants.BASE_URL + Constants.CREATE_EMPLOYEE,\n      data: {\n        name,\n        department,\n        phone,\n        email,\n        salary\n      }\n    }).then(function (response) {\n      return resolve(response.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  })\n}\n\nexport const editEmployee = async ({ id, name, department, phone, email, salary }) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'patch',\n      url: Constants.BASE_URL + Constants.GET_EMPLOYEE + id,\n      data: {\n        name,\n        department,\n        phone,\n        email,\n        salary\n      }\n    }).then(function (response) {\n      return resolve(response.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  })\n}\n\nexport const deleteEmployee = async ({ id }) => {\n  return new Promise((resolve, reject) => {\n    axios({\n      method: 'delete',\n      url: Constants.BASE_URL + Constants.GET_EMPLOYEE + id,\n    }).then(function (response) {\n      return resolve(response.data);\n    }).catch(err => {\n      return reject(err);\n    });\n  })\n}","import React, { useEffect, useState } from \"react\";\nimport moment from 'moment';\n\nimport { useTable, usePagination, useSortBy, useGlobalFilter, useAsyncDebounce } from 'react-table';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getAllEmployees, getEmployeeById, deleteEmployee, editEmployee, addEmployee } from '../utils';\nimport { Button, Col, Container, Row, Modal, Form } from 'react-bootstrap';\n\nconst GlobalFilter = ({\n  preGlobalFilteredRows,\n  globalFilter,\n  setGlobalFilter,\n}) => {\n  const count = preGlobalFilteredRows.length\n  const [value, setValue] = React.useState(globalFilter)\n  const onChange = useAsyncDebounce(value => {\n    setGlobalFilter(value || undefined)\n  }, 200)\n\n  return (\n    <span>\n      Search:{' '}\n      <input\n        className=\"form-control\"\n        value={value || \"\"}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n        placeholder={`${count} records...`}\n      />\n    </span>\n  )\n}\n\n\nconst Table = ({ columns, data }) => {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    prepareRow,\n    page,\n    canPreviousPage,\n    canNextPage,\n    pageOptions,\n    pageCount,\n    gotoPage,\n    nextPage,\n    previousPage,\n    setPageSize,\n    state: { pageIndex, pageSize, globalFilter },\n    preGlobalFilteredRows,\n    setGlobalFilter,\n  } = useTable(\n    {\n      columns,\n      data,\n      initialState: { pageIndex: 0, pageSize: 5 },\n    },\n    useGlobalFilter,\n    useSortBy,\n    usePagination,\n  )\n\n  return (\n    <div>\n      <Container>\n        <Row>\n          <Col xs={12} md={12} lg={12}>\n            <GlobalFilter\n              preGlobalFilteredRows={preGlobalFilteredRows}\n              globalFilter={globalFilter}\n              setGlobalFilter={setGlobalFilter}\n            />\n          </Col>\n          <Col xs={12} md={12} lg={12}>\n            <table className=\"table\" {...getTableProps()}>\n              <thead>\n                {headerGroups.map(headerGroup => (\n                  <tr {...headerGroup.getHeaderGroupProps()}>\n                    {headerGroup.headers.map(column => (\n                      <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n                        {column.render('Header')}\n\n                        <span>\n                          {column.isSorted\n                            ? column.isSortedDesc\n                              ? ' 🔽'\n                              : ' 🔼'\n                            : ''}\n                        </span>\n                      </th>\n                    ))}\n                  </tr>\n                ))}\n              </thead>\n              <tbody {...getTableBodyProps()}>\n                {page.map((row, i) => {\n                  prepareRow(row)\n                  return (\n                    <tr {...row.getRowProps()}>\n                      {row.cells.map(cell => {\n                        return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                      })}\n                    </tr>\n                  )\n                })}\n              </tbody>\n            </table>\n          </Col>\n          <Col xs={12} md={12} lg={12}>\n            <ul className=\"pagination\">\n              <li className=\"page-item\" onClick={() => gotoPage(0)} disabled={!canPreviousPage}>\n                <button className=\"page-link\">First</button>\n              </li>\n              <li className=\"page-item\" onClick={() => previousPage()} disabled={!canPreviousPage}>\n                <button className=\"page-link\">{'<'}</button>\n              </li>\n              <li className=\"page-item\" onClick={() => nextPage()} disabled={!canNextPage}>\n                <button className=\"page-link\">{'>'}</button>\n              </li>\n              <li className=\"page-item\" onClick={() => gotoPage(pageCount - 1)} disabled={!canNextPage}>\n                <button className=\"page-link\">Last</button>\n              </li>\n              <li>\n                <button className=\"page-link\">\n                  Page{' '}\n                  <strong>\n                    {pageIndex + 1} of {pageOptions.length}\n                  </strong>{' '}\n                </button>\n              </li>\n\n              <select\n                className=\"form-control\"\n                value={pageSize}\n                onChange={e => {\n                  setPageSize(Number(e.target.value))\n                }}\n                style={{ width: '120px', height: '38px' }}\n              >\n                {[5, 10, 20, 30, 40, 50].map(pageSize => (\n                  <option key={pageSize} value={pageSize}>\n                    Show {pageSize}\n                  </option>\n                ))}\n              </select>\n            </ul>\n          </Col>\n        </Row>\n      </Container>\n    </div >\n  )\n}\n\nconst PaginationTableComponent = () => {\n\n  const [showModal, setShowModal] = useState(false);\n  const [enteredName, setEnteredName] = useState('');\n  const [enteredPhone, setEnteredPhone] = useState('');\n  const [enteredEmail, setEnteredEmail] = useState('');\n  const [enteredSalary, setEnteredSalary] = useState('');\n  const [selectedDepartment, setSelectedDepartment] = useState('');\n  const [, setErrorMessages] = useState([]);\n  const [formType, setFormType] = useState('add');\n  const [selectedEmployee, setSelectedEmployee] = useState('');\n  const [allEmployeesData, setAllEmployeesData] = useState([]);\n\n  const titleChangeHandler = (event) => {\n    setEnteredName(event.target.value);\n  };\n\n  const amountChangeHandler = (event) => {\n    setEnteredSalary(event.target.value);\n  };\n\n  const phoneChangeHandler = (event) => {\n    setEnteredPhone(event.target.value);\n  };\n\n  const emailChangeHandler = (event) => {\n    setEnteredEmail(event.target.value);\n  };\n\n  const departmentChangeHandler = (event) => {\n    setSelectedDepartment(event.target.value);\n  }\n\n  const submitHandler = async (event) => {\n    event.preventDefault();\n    setErrorMessages([]);\n    if (enteredName === undefined || enteredName.trim().length === 0) {\n      updateErrorMessages('Name is required.');\n    }\n    if (enteredEmail === undefined || enteredEmail.trim().length === 0) {\n      updateErrorMessages('Email is required.');\n    }\n    if (enteredPhone === undefined || enteredPhone.trim().length === 0) {\n      updateErrorMessages('Phone is required.');\n    }\n    if (selectedDepartment === undefined || selectedDepartment.trim().length === 0) {\n      updateErrorMessages('Department is required.');\n    }\n    if (enteredSalary === undefined || enteredSalary === 0) {\n      updateErrorMessages('Salary is required.');\n    }\n\n    if (enteredName === undefined || enteredName.trim().length === 0 ||\n      enteredEmail === undefined || enteredEmail.trim().length === 0 ||\n      enteredPhone === undefined || enteredPhone.trim().length === 0 ||\n      selectedDepartment === undefined || selectedDepartment.trim().length === 0 ||\n      enteredSalary === undefined || enteredSalary === 0\n    ) {\n      return false;\n    }\n\n    const employeeData = {\n      name: enteredName,\n      salary: enteredSalary,\n      phone: enteredPhone,\n      email: enteredEmail,\n      date: new Date(),\n      department: selectedDepartment\n    };\n\n    if (formType === 'add') {\n      await addEmployee(employeeData);\n      await getAllEmployeeDataHandler();\n    } else { //edit form functionality\n      await editEmployee({ id: selectedEmployee, ...employeeData })\n    }\n\n    setShowModal(false);\n\n    // props.onSaveEmployeeData(employeeData);\n    emptyForm();\n  };\n\n  const emptyForm = () => {\n    setEnteredName('');\n    setEnteredSalary('');\n    setEnteredPhone('');\n    setEnteredEmail('');\n    setSelectedDepartment('');\n    setSelectedEmployee('');\n  }\n\n  const updateErrorMessages = (message) => {\n    setErrorMessages(prevState => {\n      return [...prevState, message]\n    });\n  }\n\n  const getAllEmployeeDataHandler = async () => {\n    // run API to fetch all employees\n    const response = await getAllEmployees();\n    setAllEmployeesData(response);\n  }\n\n  useEffect(() => {\n    getAllEmployeeDataHandler();\n  }, [selectedEmployee]);\n\n  const departments = [\n    '',\n    'Finance',\n    'Operations',\n    'Engineering',\n    'Human Resource',\n    'Quality Assurance',\n    'Technical Support',\n    'Talent Acquisition'\n  ];\n\n  const columns = React.useMemo(\n    () => {\n      const editFormHandler = async (empId) => {\n        const employee = await getEmployeeById({ id: empId })\n        setFormType('edit');\n        setSelectedEmployee(employee.id);\n        setShowModal(true);\n\n        // one employee data fetch API call\n\n        // Change states as per the response\n        setEnteredName(employee.name);\n        setEnteredSalary(employee.salary);\n        setEnteredPhone(employee.phone);\n        setEnteredEmail(employee.email);\n        setSelectedDepartment(employee.department);\n      }\n\n      const deleteFormHandler = async (empId) => {\n        // delete API call\n        await deleteEmployee({ id: empId })\n        await getAllEmployeeDataHandler();\n      }\n\n      return [\n        {\n          Header: 'Employees Information',\n          columns: [\n            {\n              Header: 'Date of joining',\n              accessor: 'doj',\n              Cell: ({ row: { original } }) => {\n                return (\n                  <>\n                    {moment(original.doj).format('MM/DD/YYYY')}\n                  </>\n                )\n              },\n            },\n            {\n              Header: 'Name',\n              accessor: 'name',\n            },\n            {\n              Header: 'Phone',\n              accessor: 'phone',\n            },\n            {\n              Header: 'Email',\n              accessor: 'email',\n              disableGlobalFilter: true\n            },\n            {\n              Header: 'Department',\n              accessor: 'department',\n            },\n            {\n              Header: 'Salary',\n              accessor: 'salary',\n              disableGlobalFilter: true\n            },\n            {\n              Header: 'Actions',\n              accessor: 'actions',\n              disableGlobalFilter: true,\n              disableSorting: true,\n              Cell: ({ row: { original } }) => {\n                return (\n                  <>\n                    <Button\n                      variant=\"primary\"\n                      onClick={() => editFormHandler(original.id)}\n                    >\n                      Edit\n                  </Button>\n\n                    <Button\n                      variant=\"danger\"\n                      style={{ marginLeft: '10px' }}\n                      onClick={() => deleteFormHandler(original.id)}\n                    >Delete</Button>\n                  </>\n                )\n              },\n              getProps: () => ({ someFunc: () => alert(\"clicked\") })\n            }\n          ],\n        }\n      ]\n    },\n    []\n  )\n\n  return (\n    <>\n      <Container>\n        <Row>\n          <Col xs={12} md={12} lg={12}>\n            <Button\n              variant=\"primary\"\n              style={{ float: \"right\" }}\n              onClick={() => {\n                emptyForm();\n                setFormType('add');\n                setShowModal(true);\n              }}\n            >\n              Add Employee\n              </Button>\n          </Col>\n          <Col xs={12} md={12} lg={12}>\n            {allEmployeesData && allEmployeesData.length ? <Table columns={columns} data={allEmployeesData} /> : ''}\n          </Col>\n        </Row>\n      </Container>\n      {\n        showModal ?\n          <Modal show={showModal} onHide={() => setShowModal(false)} size=\"lg\">\n            <form>\n              <Modal.Header closeButton>\n                <Modal.Title>Employee Details Form</Modal.Title>\n              </Modal.Header>\n              <Modal.Body>\n                <Container>\n                  <Row>\n                    <Col xs={12} md={6} lg={4}>\n                      <Form.Group>\n                        <Form.Label>Name*</Form.Label>\n                        <Form.Control\n                          type='text'\n                          value={enteredName || ''}\n                          onChange={titleChangeHandler}\n                        />\n                      </Form.Group>\n                    </Col>\n                    <Col xs={12} md={6} lg={4}>\n                      <Form.Group>\n                        <Form.Label>Phone*</Form.Label>\n                        <Form.Control\n                          type='text'\n                          value={enteredPhone || ''}\n                          onChange={phoneChangeHandler}\n                        />\n                      </Form.Group>\n                    </Col>\n                    <Col xs={12} md={6} lg={4}>\n                      <Form.Group>\n                        <Form.Label>Email*</Form.Label>\n                        <Form.Control\n                          type='email'\n                          value={enteredEmail || ''}\n                          onChange={emailChangeHandler}\n                        />\n                      </Form.Group>\n                    </Col>\n                    <Col xs={12} md={6} lg={4}>\n                      <Form.Group>\n                        <Form.Label>Department*</Form.Label>\n                        <Form.Control\n                          as=\"select\"\n                          value={selectedDepartment || ''}\n                          onChange={departmentChangeHandler}\n                        >\n                          {\n                            departments.map(department => {\n                              return (\n                                <option\n                                  value={department}\n                                  key={department}\n                                >\n                                  {department}\n                                </option>\n                              )\n                            })\n                          }\n                        </Form.Control>\n                      </Form.Group>\n                    </Col>\n                    <Col xs={12} md={6} lg={4}>\n                      <Form.Group>\n                        <Form.Label>Salary*</Form.Label>\n                        <Form.Control\n                          type='number'\n                          min='1000'\n                          step='1000'\n                          value={enteredSalary || ''}\n                          onChange={amountChangeHandler}\n                        />\n                      </Form.Group>\n                    </Col>\n                    <Col xs={12} md={6} lg={4}>\n\n                    </Col>\n                  </Row>\n                </Container>\n              </Modal.Body>\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => setShowModal(false)}>\n                  Close\n                </Button>\n                <Button type=\"submit\" variant=\"primary\" onClick={submitHandler}>\n                  Save Changes\n                  </Button>\n              </Modal.Footer>\n            </form>\n          </Modal>\n          : ''\n      }\n    </>\n  )\n}\n\nexport default PaginationTableComponent;","// App.js\nimport React from 'react';\nimport './App.css';\nimport PaginationTableComponent from './components/pagination.table';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <PaginationTableComponent />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}